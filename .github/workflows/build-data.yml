name: Build JSON from Issues

on:
  issues:
    types: [opened, edited, reopened, labeled, unlabeled, closed]
  workflow_dispatch: {}
  push:
    paths:
      - "scripts/build-from-issues.mjs"
      - ".github/workflows/build-data.yml"
      - ".github/ISSUE_TEMPLATE/**"

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: read
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install deps
        run: npm i octokit

      - name: Build normalized.json from issues
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: node scripts/build-from-issues.mjs

      - name: Commit & push data
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore(data): rebuild normalized.json from issues"
          file_pattern: "data/normalized.json"

name: Moderate Issues
on:
  issues:
    types: [opened]

jobs:
  close_unallowed:
    runs-on: ubuntu-latest
    permissions:
      issues: write
    steps:
      - uses: actions/github-script@v7
        with:
          script: |
            const allowed = new Set(['metinciris']); // beyaz liste
            const author = context.payload.issue.user.login;
            if (!allowed.has(author)) {
              core.info(`Closing issue from @${author}`);
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.issue.number,
                body: "Bu depo yalnız belirli kullanıcıların kayıtlarını işler. Lütfen yanlışlıkla açtıysanız kusura bakmayın. Issue otomatik kapatıldı."
              });
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.issue.number,
                state: "closed",
                state_reason: "not_planned"
              });
            } else {
              core.info(`Allowed author: @${author}`);
            }
